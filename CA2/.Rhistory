data <- read.table("results.dat", header=TRUE, sep=" ")
data <- read.table("results.dat", header=TRUE, sep=" ")
data
data$IDLE
q
quit
quit()
data
data.util<-100-data$IDLE
data.util
plot(data$N, data$IDLE
)
plot(data$N, data.util)
q
quit()
data <- read.table("results.dat", header=TRUE, sep=" ")
data.util<-100-data$IDLE
plot(data$N, data.util)
plot(data$N, data.util, type="l", xlab="Number of concurrent users", ylab="CPU Utilisation")
plot(data$N, data.throuhput, type="l");
data.throughput = data$COUNT/5;
plot(data$N, data.throughput, type="l");
plot(data$N, data.throughput);
plot(data$N, data.throughput);
data.throughput
data$N
data
data.throughput = data$C0/5;
data.throughput
plot(data$N, data.throughput)
plot(data$N, data.util)
plot(data$N, data.throughput)
plot(data$N, data.util)
plot(data$N, data.throughput)
plot(data$N, data.util)
plot(data$N, data.throughput)
plot(data$N, data.throughput, type="l")
png("NvsUi");
#Build plot N vs Ui
plot(data$N, data.util, type="l", xlab="Number of concurrent users", ylab="CPU Utilisation")
dev.off();
png("NvsDi");
#Build plot N vs Di
plot(data$N, data.throughput, type="l");
dev.off();
data.servicedemand<-data.util/data.throughput
plot(data$N, data.servicedemand)
quit()
data.busy<-100 - data$IDLE / 5
plot(data$N, data.busy)
data.servicedemand<-data.util/data.throughput
data.servicedemand<-data.util/data.throughput
plot(data$N, data.servicedemand)
plot(data$N, data.servicedemand)
clear
#Read in data from results.dat
data<-read.table("results.dat", header=TRUE, sep=" ")
#Convert to busy time
data.busy<-100 - data$IDLE;
#Calculate utilisation
data.util<-data.busy/5
#Calculate throughput
data.throughput<-data$C0/5;
#Calculate service demand
data.servicedemand<-data.util/data.throughput
#Calculate interactive response time R = M/X0 - Z
#data.response = data$M/data.throughput - Z;
png("NvsUi");
#Build plot N vs Ui
plot(data$N, data.util, type="l", xlab="Number of concurrent users", ylab="CPU Utilisation")
dev.off();
png("NvsDi");
#Build plot N vs Di
plot(data$N, data.servicedemand, type="l");
dev.off();
png("NvsX0");
#Build plot N vs Di
plot(data$N, data.throughput, type="l");
dev.off();
data.busy<-100 - data$IDLE;
plot(data$N, data.busy)
plot(data$N, data.util)
plot(data$N, data.busy)
plot(data$N, data.busy)
plot(data$N, data.util)
data
plot(data$N, data.busy)
plot(data$N, data.util)clear
clear
#Read in data from results.dat
data<-read.table("results.dat", header=TRUE, sep=" ")
#Convert to busy time
data.busy<-100 - data$IDLE;
#Calculate utilisation = busy/time
data.util<-data.busy/10
#Calculate throughput = tasks completed/time
data.throughput<-data$C0/10;
#Calculate service demand = utilisation/throughput
data.servicedemand<-data.util/data.throughput
#Calculate interactive response time R = M/X0 - Z
#data.response = data$M/data.throughput - Z;
png("NvsUi");
#Build plot N vs Ui
plot(data$N, data.util, type="l", xlab="Number of concurrent users", ylab="CPU Utilisation")
dev.off();
png("NvsDi");
#Build plot N vs Di
plot(data$N, data.servicedemand, type="l");
dev.off();
png("NvsX0");
#Build plot N vs Di
plot(data$N, data.throughput, type="l");
dev.off();
plot(data$N, data.util, type="l", xlab="Number of concurrent users",
plot(data$N, data.util, type="l", xlab="Number of concurrent users")
)
plot(data$N, data.throughput, type="l");
)
plot(data$N, data.servicedemand, type="l");
plot(data$N, data.throughput, type="l");
plot(data$N, data.util, type[A)
plot(data$N, data.util, type[A)
plot(data$N, data.util)
plot(data$N, data.util, type="l")
plot(data$N, data.throughput, type="l");
plot(data$N, data.servicedemand, type="l");
q()
